####### Streaming JOB ###########
steps:
  # Step 1: Run Terraform
  - name: hashicorp/terraform:1.6.6
    id: terraform-apply
    entrypoint: sh
    args:
      - -c
      - |
        cd terraform
        terraform init
        terraform apply -auto-approve
        terraform output -raw dataflow_template_bucket > /workspace/BKT_NAME.txt

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    dir: '.'
    args:
      [
        'build',
        '-f', 'dataflow/streaming/Dockerfile',
        '-t', 'europe-west1-docker.pkg.dev/gcp-agent-garden/streaming-registry/dataflow-streaming-pii',
        '.'
      ]

  # Step 3: Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'europe-west1-docker.pkg.dev/gcp-agent-garden/streaming-registry/dataflow-streaming-pii'
      ]

  # Step 4: Build Flex Template
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        BUCKET=$(cat /workspace/BKT_NAME.txt)
        echo "Using bucket: $$BUCKET"
        gcloud dataflow flex-template build gs://$$BUCKET/templates/streaming_pipeline.json \
        --image europe-west1-docker.pkg.dev/gcp-agent-garden/streaming-registry/dataflow-streaming-pii \
        --sdk-language PYTHON \
        --metadata-file dataflow/streaming/metadata.json \
        --temp-location gs://$$BUCKET/tmp

  # Step : Run Dataflow Flex Template
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        BUCKET=$(cat /workspace/BKT_NAME.txt)
        echo "Using bucket: $$BUCKET"
        gcloud dataflow flex-template run "streaming-beam-$(date +%Y%m%d-%H%M%S)"  \ 
        --template-file-gcs-location="gs://getwellsoon-bucket-demo/templates/streaming_pipeline.json"  \
        --region="europe-west1"   --parameters=input_subscription="projects/gcp-agent-garden/subscriptions/getwellsoon-topic-sub"  \ 
        --parameters=output_table="gcp-agent-garden.getwellsoon_dataset.customer_data" \
        --network="https://www.googleapis.com/compute/v1/projects/gcp-agent-garden/global/networks/dataflow-vpc" \
        --subnetwork="https://www.googleapis.com/compute/v1/projects/gcp-agent-garden/regions/europe-west1/subnetworks/dataflow-subnet"

############ Batch Job ##################
steps:
  # # Step 1: Run Terraform
  - name: hashicorp/terraform:1.6.6
    id: terraform-apply
    entrypoint: sh
    args:
      - -c
      - |
        cd terraform
        terraform init
        terraform apply -auto-approve
        terraform output -raw dataflow_template_bucket > /workspace/BKT_NAME.txt

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    dir: '.'
    args:
      [
        'build',
        '-f', 'dataflow/batch/Dockerfile',
        '-t', 'europe-west1-docker.pkg.dev/gcp-agent-garden/streaming-registry/dataflow-batch-pii',
        '.'
      ]

  # Step 3: Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'europe-west1-docker.pkg.dev/gcp-agent-garden/streaming-registry/dataflow-batch-pii'
      ]

# step4: Flex Build
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
          BUCKET=$(cat /workspace/BKT_NAME.txt)
          echo "Using bucket: $$BUCKET"
          gcloud dataflow flex-template build gs://$$BUCKET/getting_started_py.json \
           --image-gcr-path  europe-west1-docker.pkg.dev/gcp-agent-garden/streaming-registry/dataflow-beam-pii \
            --sdk-language "PYTHON" \
            --flex-template-base-image "PYTHON3" \
            --py-path "." \
            --metadata-file  dataflow/batch/metadata.json \
            --env "FLEX_TEMPLATE_PYTHON_PY_FILE=batch_beam.py" 
        
  # Step 4: Upload Composer DAG
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        gsutil cp composer/dags/batch_dataflow_trigger_dag.py  gs://europe-west1-composer-env-f-a3c19900-bucket/dags/

timeout: 1800s

logsBucket: 'gs://getwellsoon-bucket'
